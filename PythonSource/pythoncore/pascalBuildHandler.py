# To change this license header, choose License Headers in Project Properties.
# To change this template file, choose Tools | Templates
# and open the template in the editor.
import errno
import os
import sys 

'''
Class used to define all external output
Methods are used to write all constructs from listener
to a translated file
'''

class pascalBuildHandler(object):
    
    _CUSTOM__PATH = False
    _BUILD_EXTENSION = ".lua"
    _LAST_FILE = None
    _LAST_DIRECTORY = None
    
    #constructor
    def __init__(self): # this method creates the class object.
        self._CUSTOM__PATH = False
        self._BUILD_EXTENSION = ".lua"
        self._LAST_FILE = None
        self._Last_DIRECTORY = None
        pass
    
    #creates an empty output file
    def _create_file(self, name):
        if( self._LAST_DIRECTORY == None):
            self._LAST_FILE = open(name+self._BUILD_EXTENSION,'w')
            self._LAST_FILE.write('--Generated by PUA : https://github.com/dean2191/PascalLove2D ')
        else:
            #fix the use of slash for directory later.
            self._LAST_FILE = open(self._LAST_DIRECTORY+"/"+name+self._BUILD_EXTENSION,'w')
            self._LAST_FILE.write('--Generated by PUA : https://github.com/dean2191/PascalLove2D ')
         
        pass
    
    #Writes a function header to the file
    def _write_function(self,name,_PARAMETERS):
        self._LAST_FILE.write("\nfunction "+name+" (")
        output=""
        if _PARAMETERS:
            for item in _PARAMETERS:
                output+=("%s" % item+",")
            self._LAST_FILE.write(output[:-1])
                
        self._LAST_FILE.write(")")
        pass
    

    #close the last opened file
    def _build_file(self):
        self._LAST_FILE.close()
    
    #create a directory 
    def _create_output_dir(self, name):
        try:
            self._LAST_DIRECTORY = name
            os.makedirs(name)
        except OSError as exception:
            if exception.errno != errno.EEXIST:
                raise
        pass